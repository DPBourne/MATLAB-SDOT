function [w,vol_error,actual_vols] =SDOT_fminunc(w0,X,target_vols,bx,periodic,tol)
%
% [w,vol_error,actual_vols] =SDOT_fminunc(w0,X,target_vols,bx,periodic,tol)
%
% Note: Say what this functions does, i.e., solve the semi-discrete OT
% problem with cost ... , source measure ..., target measure ... Algorithm:
% BFGS
%
% This function computes the weights w of a Laguerre diagram in 3D with 
% seeds (x,y,z) so that the Laguerre cells have given volumes vols. 
% 
% Input arguments:
%
% w0 is an Nx1 array containing the initial guess for the weights.
%
% X is an Nx3 array containing the x-, y- and z-coordinates of the seeds.
%
% target_vols is an Nx1 array containing the desired volumes of the cells.
%
% bx=[L1,L2,L3] is a 1-by-3 array containing the dimensions of a 
% rectangular box with vertices (0,0,0), (L1,0,0), (0,L2,0), (0,0,L3), 
% (L1,L2,0), (L1,0,L3), (0,L2,L3), (L1,L2,L3).
%
% periodic is a logical argument: If periodic=true, then the Laguerre
% diagram is periodic. If periodic=false, then the Laguerre diagram is 
% non-periodic.
%
% tol is the tolerance for the convex optimization algorithm. This function
% produces a Laguerre diagram with cells of given volumes (target_vols) up 
% to tol percent error.
%
% Output arguments:
%
% w is an Nx1 array of weights so that the (periodic or non-periodic)
% Laguerre diagram generated by (X,w) in the box of dimensions 
% (L1,L2,L3) centred at (L1/2,L2/2,L3/2) has Laguerre cells with volumes 
% target_vols up to tol percentage error.
%
% vol_error is the maximum percentage error of the volumes of the cells
%
% actual_vols is a Nx1 array containing the actual volumes of the cells in 
% the Laguerre diagram generated by (X,w). These volumes agree with the
% desired volumes (target_vols) up to tol percentage error.
%
% Last updated: 3 August 2021

% Define the ojective function for the convex optimization problem
fun=@(w)get_g(w,X,target_vols,bx,periodic);

% Set the optimizer tolerance
[~,Dg0]=get_g(w0,X,target_vols,bx,periodic);
epsilon=min([tol*1e-2*min(target_vols),tol*1e-2*min(target_vols)/max(abs(Dg0))]);

% Set the optimizer options
% For MATALB:
options=optimoptions('fminunc','SpecifyObjectiveGradient',true,...
    'Display','off','OptimalityTolerance',epsilon,...
    'StepTolerance',1e-14,'FunctionTolerance',1e-14,'MaxIterations',1e6);
% For octave:
% options=optimset('GradObj','on','Display','off','TolX',epsilon*1e-3,'TolFun',epsilon*1e-3,'MaxIter',1e6);

% To do: Change the 'StepTolerance' and 'FunctionTolerance' to make them
% depend on the size of the box.

% Solve the optimization problem
w=fminunc(fun,w0,options);
[actual_vols,~,~]=mexPD(bx,X,w,periodic);
vol_error=max(abs(actual_vols-target_vols)./target_vols)*100;

end

function [g,Dg]=get_g(w,X,target_vols,bx,periodic)
% This is the function -g, where g is defined on page 99 of the book
% F. Aurenhammer, R. Klein & D.-T. Lee (2013) Voronoi Diagrams and 
% Delaunay Triangulations, World Scientific.

[actual_vols,transportCosts,~]=mexPD(bx,X,w,periodic);
Dg=actual_vols-target_vols;
g=dot(Dg,w)-sum(transportCosts);

end